{
	"nodes":[
		{"id":"4ff44de1017011c7","x":-101,"y":-381,"width":404,"height":206,"color":"4","type":"text","text":"# 软件设计\n\n软件设计是需求分析的延伸与拓展。需求分析阶段解决“做什么”的问题，而软件设计阶段解决“怎么做”的问题。同时，它也是系统实施的基础，为系统实施工作做好铺垫。"},
		{"id":"fbb0de5e15f502c6","x":-199,"y":180,"width":600,"height":660,"color":"3","type":"text","text":"# 设计模式的分类\n\n根据**处理范围**不同，设计模式可分为：\n\n- **类模式**：\n    - 处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，属于静态关系；\n- **对象模式**：\n    - 处理对象之间的关系，这些关系在运行时刻变化，更具动态性。\n\n根据**目的和用途**不同，设计模式可分为：\n\n- **创建型模式**：\n    - 主要用于创建对象。\n    - 包括：**工厂方法模式、抽象工厂模式、原型模式、单例模式和建造者模式**等。\n- **结构型模式**：\n    - 主要用于处理类或对象的组合。\n    - 包括：**适配器模式、桥接模式、组合模式、装饰模式、外观模式、享元模式和代理模式**等。\n- **行为型模式**：\n    - 主要用于描述类或对象的交互以及职责的分配。\n    - 包括：**职责链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式、访问者模式**等。"},
		{"id":"eb9a1b0736856099","x":-101,"y":-100,"width":404,"height":213,"color":"3","type":"text","text":"# 设计模式\n\n设计模式是前人经验的总结，它使人们可以方便地复用成功的软件设计。\n\n设计模式包含：模式名称、问题、目的、解决方案、效果、代码和相关设计模式等基本要素。 \n"},
		{"id":"a5aecb31e0fbef08","x":1060,"y":-300,"width":480,"height":280,"color":"1","type":"text","text":"# 结构化设计原则\n\n**高内聚，低耦合。**\n\n- **内聚表示模块内部各成分之间的联系程度**。一个好的内聚模块应当恰好做目标单一的一件事情；\n- **耦合表示模块之间联系的程度**。紧密耦合表示模块之间联系非常强，松散耦合表示模块之间联系比较弱，非耦合则表示模块之间无任何联系，是完全独立的。\n"},
		{"id":"462910529768bad4","x":1060,"y":20,"width":320,"height":160,"color":"2","type":"text","text":"# 面向对象设计的思想\n\n- 抽象\n- 封装\n- 可扩展性\n"},
		{"id":"f8051dd5b87cfa9b","x":1060,"y":220,"width":740,"height":440,"color":"2","type":"text","text":"# 面向对象设计的原则\n\n如何同时提高软件的可维护性和可复用性，是 OOD 需要解决的核心问题之一。\n\n在 OOD 中，可维护性的复用是以设计原则为基础的。\n\n常用的 00D 原则包括：\n\n- 单职原则：设计功能单一的类。本原则与结构化方法的高内聚原则是一致的。\n- 开闭原则：对扩展开放， 对修改封闭。\n- 李氏替换原则：子类可以替换父类。\n- 依赖倒置原则：要依赖于抽象，而不是具体实现；要针对接口编程，不要针对实现编程。\n- 接口隔离原则：使用多个专门的接口比使用单一的总接口要好。\n- 组合重用原则：要尽量使用组合，而不是继承关系达到重用目的。\n- 迪米特原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解。本原则与结构化方法的低耦合原则是一致的。\n\n"},
		{"id":"4efc1dcde7768333","x":1460,"y":20,"width":260,"height":160,"color":"2","type":"text","text":"# 扩展性的实现\n\n- 继承\n- 多态"},
		{"id":"92d2777b7379e6f0","x":1640,"y":-618,"width":540,"height":175,"color":"1","type":"text","text":"# 概要设计\n\n概要设计阶段，又称为总体结构设计，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，**形成软件的模块结构图，即系统结构图。**"},
		{"id":"fb819bb884f69f35","x":1640,"y":-400,"width":540,"height":380,"color":"1","type":"text","text":"# 详细设计\n\n详细设计的主要任务是为概要设计中分解出的每个具体任务选择适当的技术手段和处理方法。\n\n根据任务的不同，详细设计又可分为多种，例如：\n\n- 输入 / 输出设计\n- 处理流程设计\n- 数据存储设计\n- 用户界面设计\n- 安全性设计\n- 可靠性设计\n"},
		{"id":"c9328966283699b6","x":1060,"y":-548,"width":480,"height":209,"color":"1","type":"text","text":"# 结构化设计的过程\n\n结构化设计方法的基本思想是将软件设计成由相对独立且具有单一功能的模块组成的结构，主要阶段分为：\n\n- 概要设计\n- 详细设计\n"},
		{"id":"f08feebc3c9cdb9d","x":480,"y":-20,"width":436,"height":240,"color":"2","type":"text","text":"# 面向对象设计 OOD\n\n面向对象设计 OOD 是面向对象分析的延续，其使用模型来反映现实世界中事物特征。\n\n面向对象设计的主要任务是对类和对象进行设计，包括类的属性、方法以及类与类之间的关系，**面向对象设计的结果就是设计模型。** \n"},
		{"id":"89fcaa337e7e9fb4","x":482,"y":-545,"width":434,"height":206,"color":"1","type":"text","text":"# 结构化设计 SD\n\n结构化设计（Structured Design，SD）是一种面向数据流的方法，它以 SRS 和 SA 阶段所产生的 DFD 和数据字典等文档为基础，是一个自顶向下、逐步求精和模块化的过程。\n"}
	],
	"edges":[
		{"id":"20a157152df5072c","fromNode":"c9328966283699b6","fromSide":"right","toNode":"92d2777b7379e6f0","toSide":"left"},
		{"id":"0d3dabbb9f1ac3da","fromNode":"c9328966283699b6","fromSide":"right","toNode":"fb819bb884f69f35","toSide":"left"},
		{"id":"10882d1e925f2496","fromNode":"89fcaa337e7e9fb4","fromSide":"right","toNode":"c9328966283699b6","toSide":"left"},
		{"id":"393a0ac795f11dc6","fromNode":"89fcaa337e7e9fb4","fromSide":"right","toNode":"a5aecb31e0fbef08","toSide":"left"},
		{"id":"508841954ee341cc","fromNode":"462910529768bad4","fromSide":"right","toNode":"4efc1dcde7768333","toSide":"left"},
		{"id":"9b1eb962d426d2b3","fromNode":"f08feebc3c9cdb9d","fromSide":"right","toNode":"462910529768bad4","toSide":"left"},
		{"id":"ad2fb6b5652a1879","fromNode":"f08feebc3c9cdb9d","fromSide":"right","toNode":"f8051dd5b87cfa9b","toSide":"left"},
		{"id":"5fa15cb59ca1b5b3","fromNode":"4ff44de1017011c7","fromSide":"right","toNode":"89fcaa337e7e9fb4","toSide":"left"},
		{"id":"7547a8f04909e08a","fromNode":"4ff44de1017011c7","fromSide":"right","toNode":"f08feebc3c9cdb9d","toSide":"left"},
		{"id":"a61c50c88008bd45","fromNode":"eb9a1b0736856099","fromSide":"bottom","toNode":"fbb0de5e15f502c6","toSide":"top"},
		{"id":"bad499364092bae2","fromNode":"4ff44de1017011c7","fromSide":"bottom","toNode":"eb9a1b0736856099","toSide":"top"}
	]
}