{
	"nodes":[
		{"id":"8d4b6bffc07cbf5b","x":-360,"y":-340,"width":619,"height":340,"color":"4","type":"text","text":"# 软件部署交付\n\n软件部署是一个复杂过程，包括从开发商发放产品，到应用者在他们的计算机上实际安装并维护应用的所有活动。\n\n软件的部署交付不是一个一劳永逸的过程，而是一个持续不断的过程，伴随在整个软件的开发过程中。\n\n软件部署交付是软件生命周期中的一个重要环节，属于软件开发的后期活动，即通过配置、安装和激活等活动来保障软件制品的后续运行。\n\n软件部署技术影响着整个软件过程的运行效率和成本投入，软件系统部署的管理代价占到整个软件管理开销的大部分。\n"},
		{"id":"f61868087a46461d","x":720,"y":-379,"width":520,"height":418,"color":"3","type":"text","text":"# 软件部署交付的困难\n\n应用系统的配置是整个部署过程中的主要错误来源，软件配置过程极大地影响着软件部署结果的正确性。\n\n部署与交付常存在问题包括：\n\n- 分支冗余导致合并困难\n- 缺陷过多导致阻塞测试\n- 开发环境、测试环境、部署环境不统一导致的未知错误\n- 代码提交版本混乱无法回溯\n- 等待上线周期过长\n- 项目部署操作复杂，经常失败\n- 上线之后出现问题需要紧急回滚\n- 架构设计不合理导致发生错误之后无法准确定位\n"},
		{"id":"20a9d764c3fcb8a6","x":320,"y":-302,"width":329,"height":264,"color":"3","type":"text","text":"# 软件部署交付的内容\n\n- 打包\n- 安装\n- 配置\n- 测试\n- 集成\n- 更新\n"},
		{"id":"882ca9b83b867a70","x":-360,"y":127,"width":619,"height":231,"color":"1","type":"text","text":"# 持续交付\n\n为解决部署与交付常存在的问题，持续交付应运而生。\n\n持续交付是一系列开发实践方法，用来确保让代码能够快速、安全地部署到生产环境中。\n\n持续交付是一个完全自动化的过程，当业务开发完成时，可以做到一键部署。\n\n"},
		{"id":"1869159641633242","x":-1084,"y":127,"width":614,"height":231,"color":"1","type":"text","text":"# 持续交付的优势\n\n- 持续交付能够有效缩短提交代码到正式部署上线的时间，降低部署风险。\n- 持续交付能够自动、快速地提供反馈，及时发现和修复缺陷。\n- 持续交付让软件在整个生命周期内都处于可部署的状态。\n- 持续交付能够简化部署步骤，使软件版本更加清晰。\n- 持续交付能够让交付过程成为一种可靠的、可预期的、可视化的过程。"},
		{"id":"bd3ba99b8c6f27a5","x":-1084,"y":-90,"width":614,"height":180,"color":"1","type":"text","text":"# 持续交付的特点\n\n- 在需求阶段，抛弃传统的需求文档，使用便于开发人员理解的用户故事。\n- 在开发测试阶段，做到持续集成，让测试人员尽早进入项目开始测试。\n- 在运维阶段，打通开发和运维之间的通路，保持开发和运维环境的统一。"},
		{"id":"99e0cb1fcadf7117","x":-1084,"y":398,"width":614,"height":180,"color":"1","type":"text","text":"# 持续交付的评价\n\n在评价互联网公司的软件交付能力的时候，通常会使用两个指标：\n\n- 仅涉及一行代码的改动需要花费多少时间才能部署上线，这是核心指标。\n- 开发团队是否在以一种可重复、可靠的方式执行软件交付。"},
		{"id":"adfcb5827cf041a5","x":320,"y":420,"width":480,"height":342,"color":"2","type":"text","text":"# 持续部署的原则\n\n- 部署包全部来自统一的存储库。\n- 所有的环境使用相同的部署方式。\n- 所有的环境使用相同的部署脚本。\n- 部署流程阶梯式晋级，即在部署过程中需要设置多个检查点，一旦发生问题可以有序地进行回滚操作。\n- 整体部署由运维人员执行。\n- 仅通过流水线改变生产环境，防止配置漂移。\n- 不可变服务器。\n- 部署方式采用蓝绿部署或金丝雀部署。\n"},
		{"id":"f390a9b8dd5a134c","x":320,"y":127,"width":480,"height":188,"color":"2","type":"text","text":"# 持续部署\n\n容器技术目前是持续部署中最流行的技术。\n\n常用的持续部署方案有 Kubermetes+Docker 和  Matrix 系统两种。"},
		{"id":"19b93bbfe070ed40","x":886,"y":127,"width":624,"height":188,"color":"2","type":"text","text":"# 容器部署的优点\n\n- 容器技术上手简单，轻量级架构，体积很小。\n- 容器技术的集合性更好，能更容易对环境和软件进行打包复制和发布。\n- 容器技术的引入解决了复制和部署麻烦的问题，还能精准地将环境中的各种依赖进行完整的打包。"},
		{"id":"9228e2c7310fc83e","x":886,"y":420,"width":554,"height":440,"color":"2","type":"text","text":"# 持续部署的过程层次\n\n部署的目的并不是部署一个可工作的软件，而是部署一套可正常运行的环境。\n\n完整的镜像部署环节包括：\n\n- **Build**：\n    - 跟传统的编译类似，将软件编译成 RPM 包或 Jar 包。\n- **Ship**：\n    - 将所需的第三方依赖和第三方插件安装到环境中。\n- **Run**：\n    - 在不同的地方启动整套环境。\n\n需要注意的是，在制作完成部署包之后，每次变更软件或升级更新时，不需要重新打包，直接更新部署包即可。\n"},
		{"id":"bfedbabe9b00b6dc","x":-360,"y":406,"width":619,"height":370,"color":"2","type":"text","text":"# 不可变服务器部署\n\n不可变服务器是一种部署模式，是指除了更新和安装补丁程序以外，不对服务器进行任何更改。\n\n在早期阶段，软件的部署是在物理机上进行的，每一台服务器的网络、存储、软件环境都是不同的，物理机的不稳定让环境重构变得异常困难。\n\n后来发展为虚拟机部署，在虚拟机上借助流程化的部署能较好地构建软件环境，但是第三方依赖库的重构不稳定为整体部署带来了困难。\n\n现阶段使用容器部署不但继承和优化了虚拟机部署的优点，而且解决了第三方依赖库的重构问题，容器部署就像一个集装箱，直接把所有需要的内容全部打包并进行复制和部署。\n"},
		{"id":"8f0b9fdea3ada4ff","x":328,"y":860,"width":465,"height":194,"color":"2","type":"text","text":"# 蓝绿部署\n\n蓝绿部署是指在部署的时候准备新旧两个部署版本，通过域名解析切换的方式将用户使用环境切换到新版本中，当出现问题的时候，可以快速地将用户环境切回旧版本，并对新版本进行修复和调整。"},
		{"id":"ee5b4943b434222c","x":-178,"y":860,"width":465,"height":194,"color":"2","type":"text","text":"# 金丝雀部署\n\n金丝雀部署是指当有新版本发布的时候，先让少量用户使用新版本，并且观察新版本是否存在问题。如果出现问题，就及时处理并重新发布，如果一切正常，就稳步地将新版本适配给所有的用户。"},
		{"id":"94dbbe7cb13576c4","x":1320,"y":-379,"width":520,"height":418,"color":"3","type":"text","text":"# 软件部署交付的新趋势\n\n- **工作职责和人员分工的转变**：\n    - 软件开发人员运用自动化开发工具进行持续集成，将部署交付扩展，原来的手工运维工作被分派到了开发人员手里。\n    - 运维人员的工作从手工作业转化为开发自动化的部署脚本，并逐步并入开发人员的行列之中。\n- **大数据和云计算基础设施的普及进一步给部署带来新的飞跃**：\n    - 云计算的出现使得计算机本身也可以进行自动化创建和回收，部署和运维工作脱离具体的机器和机房，可以在远端进行，部署能力和灵活性出现了质的飞跃。\n- **研发运维的融合**"}
	],
	"edges":[
		{"id":"0623f97fce4532df","fromNode":"8d4b6bffc07cbf5b","fromSide":"right","toNode":"20a9d764c3fcb8a6","toSide":"left"},
		{"id":"361c2f924ff1cf8e","fromNode":"20a9d764c3fcb8a6","fromSide":"right","toNode":"f61868087a46461d","toSide":"left"},
		{"id":"52596674f44dae77","fromNode":"882ca9b83b867a70","fromSide":"left","toNode":"bd3ba99b8c6f27a5","toSide":"right"},
		{"id":"2c978cbbeb05150c","fromNode":"882ca9b83b867a70","fromSide":"left","toNode":"1869159641633242","toSide":"right"},
		{"id":"7d05be2f6b5cd269","fromNode":"882ca9b83b867a70","fromSide":"left","toNode":"99e0cb1fcadf7117","toSide":"right"},
		{"id":"fd3376e4132af82a","fromNode":"8d4b6bffc07cbf5b","fromSide":"bottom","toNode":"882ca9b83b867a70","toSide":"top"},
		{"id":"f1837cd4ba8d93f3","fromNode":"f390a9b8dd5a134c","fromSide":"right","toNode":"19b93bbfe070ed40","toSide":"left"},
		{"id":"278de372b7d44736","fromNode":"8d4b6bffc07cbf5b","fromSide":"bottom","toNode":"f390a9b8dd5a134c","toSide":"top"},
		{"id":"ed97b4a5cab33bf5","fromNode":"f390a9b8dd5a134c","fromSide":"bottom","toNode":"adfcb5827cf041a5","toSide":"top"},
		{"id":"3026f0b2e537a2c3","fromNode":"f390a9b8dd5a134c","fromSide":"bottom","toNode":"9228e2c7310fc83e","toSide":"top"},
		{"id":"30a5ba5f0c6a6396","fromNode":"adfcb5827cf041a5","fromSide":"left","toNode":"bfedbabe9b00b6dc","toSide":"right"},
		{"id":"ba26b50121acca7c","fromNode":"adfcb5827cf041a5","fromSide":"bottom","toNode":"8f0b9fdea3ada4ff","toSide":"top"},
		{"id":"d1aaf889de71b230","fromNode":"adfcb5827cf041a5","fromSide":"bottom","toNode":"ee5b4943b434222c","toSide":"top"},
		{"id":"6762daea31bd3085","fromNode":"f61868087a46461d","fromSide":"right","toNode":"94dbbe7cb13576c4","toSide":"left"}
	]
}